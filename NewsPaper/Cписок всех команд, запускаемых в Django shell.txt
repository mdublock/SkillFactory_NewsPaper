Все модели и методы представлены в приложении news проекта NewsPaper.
Ниже представлены команды запускаемые в Django Shell.

1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).
from django.contrib.auth.models import User
user1 = User.objects.create_user('user1')
user2 = User.objects.create_user('user2')

2. Создать два объекта модели Author, связанные с пользователями.
from news.models import Author
author1 = Author.objects.create(user=user1)
author2 = Author.objects.create(user=user2)

3. Добавить 4 категории в модель Category.
from news.models import Category
category1 = Category.objects.create(name='category1')
category2 = Category.objects.create(name='category2')
category3 = Category.objects.create(name='category3')
category4 = Category.objects.create(name='category4')

4. Добавить 2 статьи и 1 новость.
from news.models import Post
post1 = Post.objects.create(author=author1, post_type='article', title='Post 1', content='Content of post 1')
post2 = Post.objects.create(author=author2, post_type='article', title='Post 2', content='Content of post 2')
news1 = Post.objects.create(author=author1, post_type = 'news', title='News 1', content='Content of news 1')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
from news.models import PostCategory
post1.categories.add(category1, category2)
post2.categories.add(category3)
news1.categories.add(category1, category3)
PostCategory.objects.create(post=post1, category=category3)

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
from news.models import Comment
comment1 = Comment.objects.create(post=post1, user=user1, text='Comment 1 on post1')
comment2 = Comment.objects.create(post=post2, user=user2, text='Comment 1 on post2')
comment3 = Comment.objects.create(post=news1, user=user1, text='Comment 1 on news1')
comment4 = Comment.objects.create(post=post1, user=user2, text='Comment 2 on post1')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
post1.like()
post1.dislike()
news1.like()
comment1.like()
comment2.dislike()
comment3.like()
comment4.dislike()

8. Обновить рейтинги пользователей.
author1.update_rating()
author2.update_rating()

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
best_author = Author.objects.all().order_by('-rating').values('user__username', 'rating')[0]
print(f"Username: {best_author['user__username']}, Rating: {best_author['rating']}")

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
best_post = Post.objects.all().order_by('-rating')[0]
print(f"Date added: {best_post.created_at}, Username: {best_post.author.user.username}, Rating: {best_post.rating}, Title: {best_post.title}, Preview: {best_post.preview}")

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
for comment in best_post.comments.all():
    print(comment.created_at, comment.user.username, comment.rating, comment.content)
